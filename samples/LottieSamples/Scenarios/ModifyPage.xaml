<Page x:Class="LottieSamples.Scenarios.ModifyPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:animatedvisuals="using:AnimatedVisuals"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:winui="using:Microsoft.UI.Xaml.Controls"
      Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
      mc:Ignorable="d">

    <Grid>
        <StackPanel VerticalAlignment="Center">
            <!--#region IntroText-->
            <RichTextBlock Style="{StaticResource IntroTextBlock}">
                <Paragraph>
                    Lottie animations can be updated at runtime to support
                    theming, branding, high-contrast, adaptive layout, etc.
                    This feature takes advantage of an annotation added to
                    your After Effects project or Lottie file that causes
                    LottieGen to generate code that allows particular
                    properties to be updated in code-behind.
                    <LineBreak />Here,
                    <Span FontFamily="Consolas">LottieLogo1.json</Span>
                    has been renamed and annotated as
                    <Span FontFamily="Consolas">LottieLogo1_Modified.json</Span>
                    to produce
                    <Span FontFamily="Consolas">AnimatedVisuals/LottieLogo1_Modified.cs</Span>,
                    such that its colors can be updated at runtime. Then in
                    code-behind we replace the original Teal, Turquoise,
                    and White colors with SystemBaseHighColor,
                    SystemAccentColor, and SystemAltHighColor respectively.
                    <LineBreak />
                </Paragraph>
            </RichTextBlock>
            <!--#endregion-->

            <Border Style="{StaticResource LottiePlayer}">
                <winui:AnimatedVisualPlayer x:Name="Modified_Player">
                    <!--
                        Codegen Source that has been generated from the modified LottieLogo1_Modified.json to dynamically
                        update color values defined in the AfterEffects file.
                    -->
                    <animatedvisuals:LottieLogo1_Modified x:Name="Modified_Source_LottieLogo1" />
                </winui:AnimatedVisualPlayer>
            </Border>

            <!--#region OutroText-->
            <RichTextBlock Style="{StaticResource OutroTextBlock}">
                <Paragraph>
                    Check out the
                    <Hyperlink NavigateUri="https://github.com/windows-toolkit/Lottie-Windows/blob/master/samples/LottieSamples/Assets/LottieLogo1_Modified.json">
                        modified Lottie file
                    </Hyperlink>
                    +
                    <Hyperlink NavigateUri="https://github.com/windows-toolkit/Lottie-Windows/blob/master/samples/LottieSamples/AnimatedVisuals/LottieLogo1_Modified.cs">
                        codegen'd class
                    </Hyperlink>
                    +
                    <Hyperlink NavigateUri="https://github.com/windows-toolkit/Lottie-Windows/blob/master/samples/LottieSamples/Scenarios/ModifyPage.xaml">
                        XAML
                    </Hyperlink>
                    +
                    <Hyperlink NavigateUri="https://github.com/windows-toolkit/Lottie-Windows/blob/master/samples/LottieSamples/Scenarios/ModifyPage.xaml.cs">
                        code-behind
                    </Hyperlink>
                    to get a sense of how property annotations may be used to dynamically update Lottie animations.
                    <LineBreak />
                </Paragraph>
            </RichTextBlock>
            <!--#endregion-->
        </StackPanel>
    </Grid>
</Page>