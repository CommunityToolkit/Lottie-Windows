// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using Microsoft.Toolkit.Uwp.UI.Lottie.WinCompData.MetaData;
using Microsoft.Toolkit.Uwp.UI.Lottie.WinCompData.Mgcg;
using Microsoft.Toolkit.Uwp.UI.Lottie.WinUIXamlMediaData;
using Mgce = Microsoft.Toolkit.Uwp.UI.Lottie.WinCompData.Mgce;

namespace Microsoft.Toolkit.Uwp.UI.Lottie.UIData.CodeGen
{
#if PUBLIC_UIDataCodeGen
    public
#endif
    abstract class CppInstantiatorGeneratorBase : InstantiatorGeneratorBase
    {
        protected const string Muxc = "Microsoft::UI::Xaml::Controls";
        readonly bool _isCppwinrtMode;
        readonly CppStringifier _s;
        readonly string _headerFileName;
        readonly TypeNames _typeName;

        private protected CppInstantiatorGeneratorBase(
            CodegenConfiguration configuration,
            bool setCommentProperties,
            CppStringifier stringifier,
            string headerFileName,
            bool isCppwinrtMode)
            : base(
                  configuration: configuration,
                  setCommentProperties: setCommentProperties,
                  stringifier: stringifier)
        {
            _s = stringifier;
            _isCppwinrtMode = isCppwinrtMode;
            _headerFileName = headerFileName;
            _typeName = new TypeNames(stringifier, isCppwinrtMode);
            SourceClassName = AnimatedVisualSourceInfo.ClassName;
            AnimatedVisualTypeName = AnimatedVisualSourceInfo.InterfaceType.GetQualifiedName(S);
            WinUINamespace = SourceInfo.WinUi3 ? "Microsoft::UI" : "Windows::UI";
            Wuc = $"{WinUINamespace}::Composition";
        }

        protected string Wuc { get; }

        protected string WinUINamespace { get; }

        protected IAnimatedVisualSourceInfo SourceInfo => AnimatedVisualSourceInfo;

        private protected TypeNames T => _typeName;

        private protected CppStringifier S => _s;

        // The name of the source class i.e. the class
        // that contains the TryCreateAnimatedVisual method.
        protected string SourceClassName { get; }

        // The fully qualified name of the AnimatedVisual type that is returned
        // from the TryCreateAnimatedVisual method.
        protected string AnimatedVisualTypeName { get; }

        protected bool IsInterfaceCustom => SourceInfo.InterfaceType.NormalizedQualifiedName != "Microsoft.UI.Xaml.Controls.IAnimatedVisual";

        // Generates the .h file contents.
        protected string GenerateHeaderText(IAnimatedVisualSourceInfo info)
        {
            // Returns the header text that implements IAnimatedVisualSource if loadedImageSurfacesNodes is null or empty.
            // Otherwise, return the header text that implements IDynamicAnimatedVisualSource.
            var builder = new HeaderBuilder();
            if (!_isCppwinrtMode)
            {
                builder.Internal.WriteLine("internal:");
            }

            builder.Internal.Indent();
            builder.Private.Indent();

            builder.Public.WriteLine("public:");
            builder.Public.Indent();

            builder.Preamble.WriteLine("#pragma once");
            builder.Preamble.WriteLine(string.Join("\r\n", AutoGeneratedHeaderText));

            // If a non-standard interface has been specified, include a header file for it.
            // The user is expected to provide this header file. If the standard interface
            // was specified, the definitions come from WinUI.
            if (IsInterfaceCustom)
            {
                var fileName = SourceInfo.InterfaceType.UnqualifiedName;
                builder.Preamble.WriteLine($"#include \"{fileName}.h\"");
            }

            if (SourceInfo.LoadedImageSurfaces.Any())
            {
                WriteIDynamicAnimatedVisualSourceHeaderText(builder, info);
            }
            else
            {
                WriteIAnimatedVisualSourceHeaderText(builder, info);
            }

            return builder.ToString();
        }

        /// <inheritdoc/>
        // Called by the base class to write the start of the file (i.e. everything up to the body of the Instantiator class).
        protected override void WriteFileStart(CodeBuilder builder)
        {
            builder.WriteLine("#include \"pch.h\"");
            builder.WriteLine($"#include \"{_headerFileName}\"");

            // floatY, floatYxZ
            builder.WriteLine("#include \"WindowsNumerics.h\"");

            if (SourceInfo.UsesCanvas ||
                SourceInfo.UsesCanvasEffects ||
                SourceInfo.UsesCanvasGeometry)
            {
                // D2D
                builder.WriteLine("#include \"d2d1.h\"");
                builder.WriteLine("#include <d2d1_1.h>");
                builder.WriteLine("#include <d2d1helper.h>");
                builder.WriteLine("#include <Windows.Graphics.Interop.h>");

                // Interop
                // BUILD_WINDOWS is defined if the code is being built as part of a Microsoft internal
                // Windows build. In that case the types in the Windows.Graphics.Effects.Interop.h file will
                // be in the Windows::Graphics::Effects namespace.
                //
                // Otherwise, the code is being built normally and the types will be in the
                // ABI::Windows::Graphics::Effects namespace.
                //
                // To work around this inconsistency, when BUILD_WINDOWS is defined, we wrap the include
                // of Windows.Graphics.Effects.Interop.h in the ABI namespace so that the types in that file
                // will always be in the ABI::Windows::Graphics::Effects namespace. And in our
                // generated code we always refer to the types in that file using the ABI:: prefix.
                builder.WriteLine("#ifdef BUILD_WINDOWS");
                builder.WriteLine("namespace ABI");
                builder.WriteLine("{");
                builder.WriteLine("#include <Windows.Graphics.Effects.Interop.h>");
                builder.WriteLine("}");
                builder.WriteLine("#else");
                builder.WriteLine("#include <Windows.Graphics.Effects.Interop.h>");
                builder.WriteLine("#endif");

                // ComPtr
                builder.WriteLine("#include <wrl.h>");
            }

            if (SourceInfo.UsesStreams)
            {
                builder.WriteLine("#include <iostream>");
            }

            if (SourceInfo.UsesCompositeEffect)
            {
                // The CompsiteEffect class requires std::vector.
                builder.WriteLine("#include <vector>");
            }

            builder.WriteLine();

            // A sorted set to hold the namespaces that the generated code will use. The set is maintained in sorted order.
            var namespaces = new SortedSet<string>();

            if (SourceInfo.InterfaceType is null)
            {
                namespaces.Add(Muxc);
            }

            if (!_isCppwinrtMode)
            {
                namespaces.Add("Platform");
            }

            namespaces.Add("Windows::Foundation");
            namespaces.Add("Windows::Foundation::Numerics");
            namespaces.Add($"{WinUINamespace}");
            namespaces.Add(Wuc);
            namespaces.Add("Windows::Graphics");

            if (SourceInfo.UsesCanvas ||
                SourceInfo.UsesCanvasEffects ||
                SourceInfo.UsesCanvasGeometry)
            {
                namespaces.Add("Microsoft::WRL");
            }

            if (SourceInfo.UsesNamespaceWindowsUIXamlMedia)
            {
                namespaces.Add($"{WinUINamespace}::Xaml::Media");
            }

            if (SourceInfo.UsesStreams)
            {
                namespaces.Add("Platform");
                namespaces.Add("Windows::Storage::Streams");
            }

            if (SourceInfo.GenerateDependencyObject)
            {
                namespaces.Add($"{WinUINamespace}::Xaml");
            }

            // Write out each namespace using.
            foreach (var n in namespaces)
            {
                if (_isCppwinrtMode)
                {
                    builder.WriteLine($"using namespace winrt::{n};");
                }
                else
                {
                    builder.WriteLine($"using namespace {n};");
                }
            }

            builder.WriteLine();

            // Put the Instantiator class in an anonymous namespace.
            builder.WriteLine("namespace");
            builder.WriteLine("{");
            builder.Indent();

            if (SourceInfo.UsesCanvasEffects ||
                SourceInfo.UsesCanvasGeometry)
            {
                // Write GeoSource to allow it's use in function definitions.
                builder.WriteLine($"{_s.GeoSourceClass}");

                // Typedef to simplify generation.
                builder.WriteLine("typedef ComPtr<GeoSource> CanvasGeometry;");
                builder.WriteLine();
            }

            if (SourceInfo.UsesCompositeEffect)
            {
                // Write the composite effect class that will allow the use
                // of this effect without win2d.
                builder.WriteLine($"{CompositionEffectClass}");
            }
        }

        IEnumerable<string> GetConstructorParameters(IAnimatedVisualInfo info)
        {
            yield return $"{_typeName.Compositor} compositor";

            if (info.AnimatedVisualSourceInfo.IsThemed)
            {
                yield return $"{_typeName.CompositionPropertySet} themeProperties";
            }

            foreach (var loadedImageSurfaceNode in info.LoadedImageSurfaceNodes)
            {
                yield return $"{_s.ReferenceTypeName(loadedImageSurfaceNode.TypeName)} {_s.CamelCase(loadedImageSurfaceNode.Name)}";
            }
        }

        /// <inheritdoc/>
        // Called by the base class to write the end of the AnimatedVisual class.
        protected override void WriteAnimatedVisualEnd(
            CodeBuilder builder,
            IAnimatedVisualInfo info)
        {
            if (info.AnimatedVisualSourceInfo.UsesCanvasEffects ||
                info.AnimatedVisualSourceInfo.UsesCanvasGeometry)
            {
                // Utility method for D2D geometries.
                builder.WriteLine($"static {_s.ReferenceTypeName(_typeName.IGeometrySource2D)} CanvasGeometryToIGeometrySource2D(CanvasGeometry geo)");
                builder.OpenScope();
                builder.WriteLine($"ComPtr<ABI::Windows::Graphics::{_typeName.IGeometrySource2D}> interop = geo.Detach();");
                builder.WriteLine($"return reinterpret_cast<{_s.ReferenceTypeName(_typeName.IGeometrySource2D)}>(interop.Get());");
                builder.CloseScope();
                builder.WriteLine();

                // Utility method for fail-fasting on bad HRESULTs from d2d operations.
                builder.WriteLine("static void FFHR(HRESULT hr)");
                builder.OpenScope();
                builder.WriteLine("if (hr != S_OK)");
                builder.OpenScope();
                builder.WriteLine("RoFailFastWithErrorContext(hr);");
                builder.CloseScope();
                builder.CloseScope();
                builder.WriteLine();
            }

            // Write the constructor for the AnimatedVisual class.
            builder.UnIndent();
            builder.WriteLine("public:");
            builder.Indent();

            // Constructor.
            builder.WriteBreakableLine($"{info.ClassName}(", CommaSeparate(GetConstructorParameters(info)), ")");
            builder.Indent();

            // Initializer list.
            builder.WriteLine(": _c(compositor)");
            if (info.AnimatedVisualSourceInfo.IsThemed)
            {
                builder.WriteLine($", {info.AnimatedVisualSourceInfo.ThemePropertiesFieldName}(themeProperties)");
            }

            // Initialize the image surfaces.
            foreach (var n in info.LoadedImageSurfaceNodes)
            {
                builder.WriteLine($", {n.FieldName}({_s.CamelCase(n.Name)})");
            }

            // Instantiate the reusable ExpressionAnimation.
            builder.WriteLine($", {info.AnimatedVisualSourceInfo.ReusableExpressionAnimationFieldName}(compositor{_s.Deref}CreateExpressionAnimation())");

            builder.UnIndent();

            builder.OpenScope();
            if (info.AnimatedVisualSourceInfo.UsesCanvasEffects ||
                info.AnimatedVisualSourceInfo.UsesCanvasGeometry)
            {
                builder.WriteLine($"{FailFastWrapper("D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.GetAddressOf())")};");
            }

            // Instantiate the root. This will cause the whole Visual tree to be built and animations started.
            builder.WriteLine("const auto _ = Root();");
            builder.CloseScope();

            // Write the destructor. This is how CX implements IClosable/IDisposable.
            builder.WriteLine();
            if (_isCppwinrtMode)
            {
                builder.WriteLine("void Close()");
                builder.OpenScope();
                builder.WriteLine("if (_root)");
                builder.OpenScope();
                builder.WriteLine("_root.Close();");
                builder.CloseScope();
                builder.CloseScope();
            }
            else
            {
                // CX doesn't need to do anything - the root object will be disposed
                // as a result of this object being cleaned up.
                builder.WriteLine($"virtual ~{info.ClassName}() {{ }}");
            }

            // Write the members on IAnimatedVisual.
            builder.WriteLine();
            {
                var propertyImplBuilder = new CodeBuilder();
                propertyImplBuilder.WriteLine($"return {{ {_s.TimeSpan(info.AnimatedVisualSourceInfo.DurationTicksFieldName)} }};");
                WritePropertyImpl(builder, isVirtual: true, "TimeSpan", "Duration", propertyImplBuilder);
            }

            builder.WriteLine();
            {
                var propertyImplBuilder = new CodeBuilder();
                propertyImplBuilder.WriteLine("return _root;");
                WritePropertyImpl(builder, isVirtual: true, _typeName.Visual, "RootVisual", propertyImplBuilder);
            }

            builder.WriteLine();
            {
                var propertyImplBuilder = new CodeBuilder();
                propertyImplBuilder.WriteLine($"return {Vector2(info.AnimatedVisualSourceInfo.CompositionDeclaredSize)};");
                WritePropertyImpl(builder, isVirtual: true, "float2", "Size", propertyImplBuilder);
            }

            // WinUI3 doesn't ever do a version check. It's up to the user to make sure
            // the version they're using is compatible.
            if (!SourceInfo.WinUi3)
            {
                // Write the IsRuntimeCompatible static method.
                builder.WriteLine("static bool IsRuntimeCompatible()");
                builder.OpenScope();
                builder.WriteLine($"return Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent({_s.String("Windows.Foundation.UniversalApiContract")}, {info.RequiredUapVersion});");
                builder.CloseScope();
            }

            // Close the scope for the instantiator class.
            builder.CloseCppTypeScope();
        }

        void WritePropertyImpl(
            CodeBuilder builder,
            bool isVirtual,
            string returnType,
            string propertyName,
            CodeBuilder getImplementation)
        {
            if (_isCppwinrtMode)
            {
                builder.WriteLine($"{returnType} {propertyName}() const");
                builder.OpenScope();
                builder.WriteCodeBuilder(getImplementation);
                builder.CloseScope();
                builder.WriteLine();
            }
            else
            {
                builder.WriteLine($"property {returnType} {propertyName}");
                builder.OpenScope();
                builder.WriteLine($"{(isVirtual ? "virtual " : string.Empty)}{returnType} get()");
                builder.OpenScope();
                builder.WriteCodeBuilder(getImplementation);
                builder.CloseScope();
                builder.CloseScope();
                builder.WriteLine();
            }
        }

        /// <inheritdoc/>
        // Called by the base class to write the end of the file (i.e. everything after the body of the AnimatedVisual class).
        protected override void WriteFileEnd(CodeBuilder builder)
        {
            // Close the anonymous namespace.
            builder.UnIndent();
            builder.WriteLine("} // end namespace");
            builder.WriteLine();

            // Generate the methods that create and get the theme property set.
            if (SourceInfo.IsThemed)
            {
                WriteThemePropertyImpls(builder);
            }

            // Generate the method that creates an instance of the composition on the IAnimatedVisualSource.
            builder.WriteLine($"{S.Hatted(AnimatedVisualTypeName)} {_s.Namespace(SourceInfo.Namespace)}::{SourceClassName}::TryCreateAnimatedVisual(");
            builder.Indent();
            if (_isCppwinrtMode)
            {
                builder.WriteLine($"const {_typeName.Compositor}& compositor,");
                builder.WriteLine($"{_typeName.Object}& diagnostics)");
            }
            else
            {
                builder.WriteLine($"{_typeName.Compositor} compositor,");
                builder.WriteLine($"{_typeName.Object}* diagnostics)");
            }

            builder.UnIndent();
            builder.OpenScope();

            if (SourceInfo.IsThemed)
            {
                builder.WriteLine("const auto _ = EnsureThemeProperties(compositor);");
            }

            if (SourceInfo.LoadedImageSurfaces.Count > 0)
            {
                WriteIDynamicAnimatedVisualSource(builder);
            }
            else
            {
                WriteIAnimatedVisualSource(builder);
            }
        }

        private protected abstract void WriteThemeHeader(HeaderBuilder builder);

        private protected abstract void WriteHeaderClassStart(HeaderBuilder builder, IAnimatedVisualSourceInfo info, string inherits);

        protected abstract void WriteThemePropertyImpls(CodeBuilder builder);

        /// <inheritdoc/>
        protected override void WriteCanvasGeometryCombinationFactory(CodeBuilder builder, CanvasGeometry.Combination obj, string typeName, string fieldName)
        {
            builder.WriteLine($"{typeName} result;");
            builder.WriteLine("ID2D1Geometry *geoA = nullptr, *geoB = nullptr;");
            builder.WriteLine($"{CallFactoryFor(obj.A)}->GetGeometry(&geoA);");
            builder.WriteLine($"{CallFactoryFor(obj.B)}->GetGeometry(&geoB);");
            builder.WriteLine("ComPtr<ID2D1PathGeometry> path;");
            builder.WriteLine($"{FailFastWrapper("_d2dFactory->CreatePathGeometry(&path)")};");
            builder.WriteLine("ComPtr<ID2D1GeometrySink> sink;");
            builder.WriteLine($"{FailFastWrapper("path->Open(&sink)")};");
            builder.WriteLine($"FFHR(geoA->CombineWithGeometry(");
            builder.Indent();
            builder.WriteLine($"geoB,");
            builder.WriteLine($"{_s.CanvasGeometryCombine(obj.CombineMode)},");
            builder.WriteLine($"{_s.Matrix3x2(obj.Matrix)},");
            builder.WriteLine($"sink.Get()));");
            builder.UnIndent();
            builder.WriteLine("geoA->Release();");
            builder.WriteLine("geoB->Release();");
            builder.WriteLine($"{FailFastWrapper("sink->Close()")};");
            builder.WriteLine($"result = {FieldAssignment(fieldName)}new GeoSource(path.Get());");
        }

        /// <inheritdoc/>
        protected override void WriteCanvasGeometryEllipseFactory(CodeBuilder builder, CanvasGeometry.Ellipse obj, string typeName, string fieldName)
        {
            builder.WriteLine($"{typeName} result;");
            builder.WriteLine("ComPtr<ID2D1EllipseGeometry> ellipse;");
            builder.WriteLine("FFHR(_d2dFactory->CreateEllipseGeometry(");
            builder.Indent();
            builder.WriteLine($"D2D1::Ellipse({{{Float(obj.X)},{Float(obj.Y)}}}, {Float(obj.RadiusX)}, {Float(obj.RadiusY)}),");
            builder.WriteLine("&ellipse));");
            builder.UnIndent();
            builder.WriteLine($"result = {FieldAssignment(fieldName)}new GeoSource(ellipse.Get());");
        }

        /// <inheritdoc/>
        protected override void WriteCanvasGeometryGroupFactory(CodeBuilder builder, CanvasGeometry.Group obj, string typeName, string fieldName)
        {
            builder.WriteLine($"ComPtr<ID2D1Geometry> geometries[{obj.Geometries.Length}];");
            builder.OpenScope();
            for (var i = 0; i < obj.Geometries.Length; i++)
            {
                var geometry = obj.Geometries[i];
                builder.WriteLine($"{CallFactoryFor(geometry)}.Get()->GetGeometry(&geometries[{i}]);");
            }

            builder.CloseScope();
            builder.WriteLine($"{typeName} result;");
            builder.WriteLine("ComPtr<ID2D1GeometryGroup> group;");
            builder.WriteLine("FFHR(_d2dFactory->CreateGeometryGroup(");
            builder.Indent();
            builder.WriteLine($"{FilledRegionDetermination(obj.FilledRegionDetermination)},");
            builder.WriteLine("geometries[0].GetAddressOf(),");
            builder.WriteLine($"{obj.Geometries.Length},");
            builder.WriteLine("&group));");
            builder.UnIndent();
            builder.WriteLine($"result = {FieldAssignment(fieldName)}new GeoSource(group.Get());");
        }

        /// <inheritdoc/>
        protected override void WriteCanvasGeometryPathFactory(CodeBuilder builder, CanvasGeometry.Path obj, string typeName, string fieldName)
        {
            builder.WriteLine($"{typeName} result;");

            // D2D Setup
            builder.WriteLine("ComPtr<ID2D1PathGeometry> path;");
            builder.WriteLine($"{FailFastWrapper("_d2dFactory->CreatePathGeometry(&path)")};");
            builder.WriteLine("ComPtr<ID2D1GeometrySink> sink;");
            builder.WriteLine($"{FailFastWrapper("path->Open(&sink)")};");

            if (obj.FilledRegionDetermination != CanvasFilledRegionDetermination.Alternate)
            {
                builder.WriteLine($"sink->SetFillMode({FilledRegionDetermination(obj.FilledRegionDetermination)});");
            }

            foreach (var command in obj.Commands)
            {
                switch (command.Type)
                {
                    case CanvasPathBuilder.CommandType.BeginFigure:
                        // Assume D2D1_FIGURE_BEGIN_FILLED
                        builder.WriteLine($"sink->BeginFigure({Vector2(((CanvasPathBuilder.Command.BeginFigure)command).StartPoint)}, D2D1_FIGURE_BEGIN_FILLED);");
                        break;
                    case CanvasPathBuilder.CommandType.EndFigure:
                        builder.WriteLine($"sink->EndFigure({CanvasFigureLoop(((CanvasPathBuilder.Command.EndFigure)command).FigureLoop)});");
                        break;
                    case CanvasPathBuilder.CommandType.AddLine:
                        builder.WriteLine($"sink->AddLine({Vector2(((CanvasPathBuilder.Command.AddLine)command).EndPoint)});");
                        break;
                    case CanvasPathBuilder.CommandType.AddCubicBezier:
                        var cb = (CanvasPathBuilder.Command.AddCubicBezier)command;
                        builder.WriteLine($"sink->AddBezier({{ {Vector2(cb.ControlPoint1)}, {Vector2(cb.ControlPoint2)}, {Vector2(cb.EndPoint)} }});");
                        break;
                    default:
                        throw new InvalidOperationException();
                }
            }

            builder.WriteLine($"{FailFastWrapper("sink->Close()")};");
            builder.WriteLine("GeoSource* rawResult = new GeoSource(path.Get());");
            builder.WriteLine($"result = {FieldAssignment(fieldName)}rawResult;");
            builder.WriteLine("rawResult->Release();");
        }

        /// <inheritdoc/>
        protected override void WriteCanvasGeometryRoundedRectangleFactory(CodeBuilder builder, CanvasGeometry.RoundedRectangle obj, string typeName, string fieldName)
        {
            builder.WriteLine($"{typeName} result;");
            builder.WriteLine("ComPtr<ID2D1RoundedRectangleGeometry> rect;");
            builder.WriteLine("FFHR(_d2dFactory->CreateRoundedRectangleGeometry(");
            builder.Indent();
            builder.WriteLine($"D2D1::RoundedRect({{{Float(obj.X)},{Float(obj.Y)}}}, {Float(obj.RadiusX)}, {Float(obj.RadiusY)}),");
            builder.WriteLine("&rect));");
            builder.UnIndent();
            builder.WriteLine($"result = {FieldAssignment(fieldName)}new GeoSource(rect.Get());");
        }

        /// <inheritdoc/>
        protected override void WriteCanvasGeometryTransformedGeometryFactory(CodeBuilder builder, CanvasGeometry.TransformedGeometry obj, string typeName, string fieldName)
        {
            builder.WriteLine($"{typeName} result;");
            builder.WriteLine("ID2D1Geometry *geoA = nullptr;");
            builder.WriteLine("ID2D1TransformedGeometry *transformed;");
            builder.WriteLine($"D2D1_MATRIX_3X2_F transformMatrix{_s.Matrix3x2(obj.TransformMatrix)};");
            builder.WriteLine();
            builder.WriteLine($"{CallFactoryFor(obj.SourceGeometry)}->GetGeometry(&geoA);");
            builder.WriteLine("FFHR(_d2dFactory->CreateTransformedGeometry(geoA, transformMatrix, &transformed));");
            builder.WriteLine("geoA->Release();");
            builder.WriteLine($"result = {FieldAssignment(fieldName)}new GeoSource(transformed);");
        }

        /// <inheritdoc/>
        protected override string WriteCompositeEffectFactory(CodeBuilder builder, Mgce.CompositeEffect compositeEffect)
        {
            builder.WriteLine("ComPtr<CompositeEffect> compositeEffect(new CompositeEffect());");
            builder.WriteLine($"compositeEffect->SetMode({_s.CanvasCompositeMode(compositeEffect.Mode)});");
            foreach (var source in compositeEffect.Sources)
            {
                builder.OpenScope();
                builder.WriteLine($"auto sourceParameter = ref new CompositionEffectSourceParameter({String(source.Name)});");
                builder.WriteLine("compositeEffect->AddSource(reinterpret_cast<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*>(sourceParameter));");
                builder.CloseScope();
            }

            return $"reinterpret_cast<{_s.ReferenceTypeName("Windows::Graphics::Effects::IGraphicsEffect")}>(compositeEffect.Get())";
        }

        /// <summary>
        /// Generate the body of the TryCreateAnimatedVisual() method for a composition that does not contain LoadedImageSurfaces.
        /// </summary>
        void WriteIAnimatedVisualSource(CodeBuilder builder)
        {
            builder.WriteLine("diagnostics = nullptr;");

            // Check the runtime version and instantiate the highest compatible IAnimatedVisual class.
            WriteInstantiateHighestCompatibleAnimatedVisual(builder, SourceInfo.AnimatedVisualInfos);

            builder.CloseScope();
        }

        /// <summary>
        /// Generate the body of the TryCreateAnimatedVisual() method for a composition that contains LoadedImageSurfaces.
        /// </summary>
        void WriteIDynamicAnimatedVisualSource(CodeBuilder builder)
        {
            builder.WriteLine("m_isTryCreateAnimatedVisualCalled = true;");
            builder.WriteLine("diagnostics = nullptr;");
            builder.WriteLine();

            // Check whether the runtime will support the lowest UAP version required.
            var animatedVisualInfos = SourceInfo.AnimatedVisualInfos.OrderByDescending(avi => avi.RequiredUapVersion).ToArray();

            // WinUI3 doesn't ever do a version check. It's up to the user to make sure
            // the version they're using is compatible.
            if (!SourceInfo.WinUi3)
            {
                builder.WriteLine($"if (!{animatedVisualInfos[animatedVisualInfos.Length - 1].ClassName}::IsRuntimeCompatible())");
                builder.OpenScope();
                builder.WriteLine("return nullptr;");
                builder.CloseScope();
            }

            builder.WriteLine();
            builder.WriteLine("EnsureImageLoadingStarted();");
            builder.WriteLine();
            builder.WriteLine("if (m_isAnimatedVisualSourceDynamic && m_loadCompleteEventCount != c_loadedImageSurfaceCount)");
            builder.OpenScope();
            builder.WriteLine("return nullptr;");
            builder.CloseScope();

            // Check the runtime version and instantiate the highest compatible IAnimatedVisual class.
            WriteInstantiateHighestCompatibleAnimatedVisual(builder, animatedVisualInfos);

            builder.CloseScope();
            builder.WriteLine();

            // Generate the get() and set() methods of IsAnimatedVisualSourceDynamic property.
            WriteIsAnimatedVisualSourceDynamicGetSet(builder);

            // Generate the method that loads all the LoadedImageSurfaces.
            WriteEnsureImageLoadingStarted(builder);

            // Generate the method that handles the LoadCompleted event of the LoadedImageSurface objects.
            WriteHandleLoadCompleted(builder);
        }

        void WriteInstantiateHighestCompatibleAnimatedVisual(
                CodeBuilder builder,
                IReadOnlyList<IAnimatedVisualInfo> animatedVisualInfos)
        {
            // WinUI3 doesn't ever do a version check. It's up to the user to make sure
            // the version they're using is compatible.
            if (SourceInfo.WinUi3)
            {
                var info = animatedVisualInfos.First();
                builder.WriteBreakableLine($"return {_s.New(info.ClassName)}(", CommaSeparate(GetConstructorArguments(info)), ");");
            }
            else
            {
                foreach (var info in animatedVisualInfos.OrderByDescending(avi => avi.RequiredUapVersion))
                {
                    builder.WriteLine();
                    builder.WriteLine($"if ({info.ClassName}::IsRuntimeCompatible())");
                    builder.OpenScope();
                    builder.WriteBreakableLine($"return {_s.New(info.ClassName)}(", CommaSeparate(GetConstructorArguments(info)), ");");
                    builder.CloseScope();
                }

                builder.WriteLine();
                builder.WriteLine("return nullptr;");
            }
        }

        void WriteIsAnimatedVisualSourceDynamicGetSet(CodeBuilder builder)
        {
            builder.WriteLine($"bool {_s.Namespace(SourceInfo.Namespace)}::{SourceClassName}::IsAnimatedVisualSourceDynamic::get()");
            builder.OpenScope();
            builder.WriteLine("return m_isAnimatedVisualSourceDynamic;");
            builder.CloseScope();
            builder.WriteLine();
            builder.WriteLine($"void {_s.Namespace(SourceInfo.Namespace)}::{SourceClassName}::IsAnimatedVisualSourceDynamic::set(bool isAnimatedVisualSourceDynamic)");
            builder.OpenScope();
            builder.WriteLine("if (!m_isTryCreateAnimatedVisualCalled && m_isAnimatedVisualSourceDynamic != isAnimatedVisualSourceDynamic)");
            builder.OpenScope();
            builder.WriteLine("m_isAnimatedVisualSourceDynamic = isAnimatedVisualSourceDynamic;");
            builder.WriteLine("PropertyChanged(this, ref new PropertyChangedEventArgs(\"IsAnimatedVisualSourceDynamic\"));");
            builder.CloseScope();
            builder.CloseScope();
            builder.WriteLine();
        }

        void WriteEnsureImageLoadingStarted(CodeBuilder builder)
        {
            builder.WriteLine($"void {_s.Namespace(SourceInfo.Namespace)}::{SourceClassName}::EnsureImageLoadingStarted()");
            builder.OpenScope();
            builder.WriteLine("if (!m_isImageLoadingStarted)");
            builder.OpenScope();
            builder.WriteLine($"auto eventHandler = ref new TypedEventHandler<{_s.ReferenceTypeName("LoadedImageSurface")}, {_s.ReferenceTypeName("LoadedImageSourceLoadCompletedEventArgs")}>(this, &{_s.Namespace(SourceInfo.Namespace)}::{SourceClassName}::HandleLoadCompleted);");

            foreach (var n in SourceInfo.LoadedImageSurfaces)
            {
                var imageMemberName = n.FieldName;
                switch (n.LoadedImageSurfaceType)
                {
                    case LoadedImageSurface.LoadedImageSurfaceType.FromStream:
                        var streamName = $"stream_{n.Name}";
                        var dataWriterName = $"dataWriter_{n.Name}";
                        builder.WriteLine($"auto {streamName} = ref new InMemoryRandomAccessStream();");
                        builder.WriteLine($"auto {dataWriterName} = ref new DataWriter({streamName}->GetOutputStreamAt(0));");
                        builder.WriteLine($"{dataWriterName}->WriteBytes({n.BytesFieldName});");
                        builder.WriteLine($"{dataWriterName}->StoreAsync();");
                        builder.WriteLine($"{dataWriterName}->FlushAsync();");
                        builder.WriteLine($"{streamName}->Seek(0);");
                        builder.WriteLine($"{imageMemberName} = {WinUINamespace}::Xaml::Media::LoadedImageSurface::StartLoadFromStream({streamName});");
                        break;
                    case LoadedImageSurface.LoadedImageSurfaceType.FromUri:
                        builder.WriteLine($"{imageMemberName} = {WinUINamespace}::Xaml::Media::LoadedImageSurface::StartLoadFromUri(ref new Uri(\"{n.ImageUri}\"));");
                        break;
                    default:
                        throw new InvalidOperationException();
                }

                builder.WriteLine($"{imageMemberName}->LoadCompleted += eventHandler;");
            }

            builder.WriteLine("m_isImageLoadingStarted = true;");
            builder.CloseScope();
            builder.CloseScope();
            builder.WriteLine();
        }

        void WriteHandleLoadCompleted(CodeBuilder builder)
        {
            builder.WriteLine($"void {_s.Namespace(SourceInfo.Namespace)}::{SourceClassName}::HandleLoadCompleted({_s.ReferenceTypeName("LoadedImageSurface")} sender, {_s.ReferenceTypeName("LoadedImageSourceLoadCompletedEventArgs")} e)");
            builder.OpenScope();
            builder.WriteLine("m_loadCompleteEventCount++;");
            builder.WriteLine("if (e->Status == LoadedImageSourceLoadStatus::Success)");
            builder.OpenScope();
            builder.WriteLine("m_imageSuccessfulLoadingProgress = (double)m_loadCompleteEventCount / c_loadedImageSurfaceCount;");
            builder.WriteLine("PropertyChanged(this, ref new PropertyChangedEventArgs(\"ImageSuccessfulLoadingProgress\"));");
            builder.CloseScope();
            builder.WriteLine();
            builder.WriteLine("if (m_loadCompleteEventCount == c_loadedImageSurfaceCount)");
            builder.OpenScope();
            builder.WriteLine("m_isImageLoadingCompleted = true;");
            builder.WriteLine("PropertyChanged(this, ref new PropertyChangedEventArgs(\"IsImageLoadingCompleted\"));");
            builder.WriteLine("if (m_isAnimatedVisualSourceDynamic)");
            builder.OpenScope();
            builder.WriteLine("RaiseAnimatedVisualInvalidatedEvent(this, nullptr);");
            builder.CloseScope();
            builder.CloseScope();
            builder.CloseScope();
            builder.WriteLine();
        }

        IEnumerable<string> GetConstructorArguments(IAnimatedVisualInfo info)
        {
            yield return "compositor";

            if (info.AnimatedVisualSourceInfo.IsThemed)
            {
                yield return info.AnimatedVisualSourceInfo.ThemePropertiesFieldName;
            }

            foreach (var loadedImageSurfaceNode in info.LoadedImageSurfaceNodes)
            {
                yield return loadedImageSurfaceNode.FieldName;
            }
        }

        static string[] CommaSeparate(IEnumerable<string> args)
        {
            var result = args.ToArray();
            for (var i = 0; i < result.Length - 1; i++)
            {
                result[i] += ",";
            }

            return result;
        }

        string CanvasFigureLoop(CanvasFigureLoop value) => _s.CanvasFigureLoop(value);

        static string FieldAssignment(string fieldName) => fieldName != null ? $"{fieldName} = " : string.Empty;

        string FilledRegionDetermination(CanvasFilledRegionDetermination value) => _s.FilledRegionDetermination(value);

        string Float(float value) => _s.Float(value);

        string FailFastWrapper(string value) => _s.FailFastWrapper(value);

        string String(string value) => _s.String(value);

        string Vector2(Vector2 value) => _s.Vector2(value);

        void WriteSourceDescriptionComments(CodeBuilder builder)
        {
            // Write a description of the source as comments.
            foreach (var line in GetSourceDescriptionLines())
            {
                builder.WritePreformattedCommentLine(line);
            }
        }

        void WriteInternalHeaderConstants(CodeBuilder builder)
        {
            // Add any internal constants.
            foreach (var c in SourceInfo.InternalConstants)
            {
                builder.WriteComment(c.Description);
                switch (c.Type)
                {
                    case ConstantType.Color:
                        builder.WriteLine($"static inline const {WinUINamespace}::Color {c.Name}{S.Color((WinCompData.Wui.Color)c.Value)};");
                        break;
                    case ConstantType.Int64:
                        builder.WriteLine($"static constexpr int64_t {c.Name}{{ {S.Int64((long)c.Value)} }};");
                        break;
                    case ConstantType.Float:
                        builder.WriteLine($"static constexpr float {c.Name}{{ {S.Float((float)c.Value)} }};");
                        break;
                    default:
                        throw new InvalidOperationException();
                }

                builder.WriteLine();
            }
        }

        // Writes the start of the namespace, the start of the class, internal constants, and the theming interface.
        void WriteHeaderNamespaceStart(HeaderBuilder builder, IAnimatedVisualSourceInfo info, string inherits)
        {
            builder.Preamble.WriteLine();
            builder.Preamble.WriteLine($"namespace {_s.Namespace(SourceInfo.Namespace)}");
            builder.Preamble.OpenScope();

            WriteSourceDescriptionComments(builder.Preamble);

            WriteHeaderClassStart(builder, info, inherits);

            WriteInternalHeaderConstants(builder.Internal);

            if (SourceInfo.IsThemed)
            {
                WriteThemeHeader(builder);
            }
        }

        void WriteIAnimatedVisualSourceHeaderText(HeaderBuilder builder, IAnimatedVisualSourceInfo info)
        {
            if (SourceInfo.GenerateDependencyObject)
            {
                WriteHeaderNamespaceStart(builder, info, $"{WinUINamespace}::Xaml::DependencyObject, {AnimatedVisualTypeName}Source");
            }
            else
            {
                WriteHeaderNamespaceStart(builder, info, $"{AnimatedVisualTypeName}Source");
            }

            var returnType =
                _isCppwinrtMode
                    ? $"winrt::{AnimatedVisualTypeName}"
                    : S.Hatted(AnimatedVisualTypeName);

            builder.Public.WriteLine($"virtual {returnType} TryCreateAnimatedVisual(");
            builder.Public.Indent();
            if (_isCppwinrtMode)
            {
                builder.Public.WriteLine($"const winrt::{Wuc}::{_typeName.Compositor}& compositor,");
                builder.Public.WriteLine($"winrt::{_typeName.Object}& diagnostics);");
            }
            else
            {
                builder.Public.WriteLine($"{Wuc}::{_typeName.Compositor} compositor,");
                builder.Public.WriteLine($"Platform::{_typeName.Object}* diagnostics);");
            }

            // The GetThemeProperties method is designed to allow setting of properties when the actual
            // type of the IAnimatedVisualSource is not known. It relies on a custom interface that declares
            // it, so if we're not generating code for a custom interface, there's no reason to generate
            // the method.
            if (IsInterfaceCustom && SourceInfo.IsThemed)
            {
                var optionalVirtual = SourceInfo.InterfaceType is null ? string.Empty : "virtual ";
                if (_isCppwinrtMode)
                {
                    builder.Public.WriteLine($"{optionalVirtual}winrt::{Wuc}::{T.CompositionPropertySet} GetThemeProperties(winrt::{Wuc}::{T.Compositor} compositor);");
                }
                else
                {
                    builder.Public.WriteLine($"{optionalVirtual}{Wuc}::{T.CompositionPropertySet} GetThemeProperties({Wuc}::{T.Compositor} compositor);");
                }

                builder.Public.WriteLine();
            }
        }

        void WriteIDynamicAnimatedVisualSourceHeaderText(HeaderBuilder builder, IAnimatedVisualSourceInfo info)
        {
            var loadedImageSurfaceNodes = SourceInfo.LoadedImageSurfaces.ToArray();

            builder.Preamble.WriteLine($"using namespace {Muxc};");
            builder.Preamble.WriteLine("using namespace Platform;");
            builder.Preamble.WriteLine($"using namespace {WinUINamespace}::Xaml;");
            builder.Preamble.WriteLine($"using namespace {WinUINamespace}::Xaml::Data;");
            builder.Preamble.WriteLine($"using namespace {WinUINamespace}::Xaml::Media;");

            WriteHeaderNamespaceStart(builder, info, "public IDynamicAnimatedVisualSource, INotifyPropertyChanged");

            builder.Preamble.WriteLine();
            builder.Preamble.WriteLine($"virtual event {_s.ReferenceTypeName($"Windows::Foundation::TypedEventHandler<{_s.ReferenceTypeName("IDynamicAnimatedVisualSource")}, {_typeName.Object}>")} AnimatedVisualInvalidated");
            builder.Preamble.OpenScope();
            builder.Preamble.WriteLine($"Windows::Foundation::EventRegistrationToken add({_s.ReferenceTypeName($"Windows::Foundation::TypedEventHandler<{_s.ReferenceTypeName("IDynamicAnimatedVisualSource")}, {_typeName.Object}>")} value)");
            builder.Preamble.OpenScope();
            builder.Preamble.WriteLine("return m_InternalHandler::add(value);");
            builder.Preamble.CloseScope();
            builder.Preamble.WriteLine("void remove(Windows::Foundation::EventRegistrationToken token)");
            builder.Preamble.OpenScope();
            builder.Preamble.WriteLine("m_InternalHandler::remove(token);");
            builder.Preamble.CloseScope();
            builder.Preamble.CloseScope();

            builder.Preamble.WriteLine();
            builder.Preamble.WriteLine($"virtual {_s.ReferenceTypeName($"{S.Hatted(AnimatedVisualTypeName)}")} TryCreateAnimatedVisual(");
            builder.Preamble.Indent();
            builder.Preamble.WriteLine($"{Wuc}::{_typeName.Compositor} compositor,");
            builder.Preamble.WriteLine($"{_typeName.Object}* diagnostics);");
            builder.Preamble.UnIndent();
            builder.Preamble.WriteLine();
            builder.Preamble.WriteLine($"virtual event {_s.ReferenceTypeName("PropertyChangedEventHandler")} PropertyChanged;");
            builder.Preamble.WriteSummaryComment("If this property is set to true, <see cref=\"TryCreateAnimatedVisual\"/> will" +
                " return null until all images have loaded. When all images have loaded, <see cref=\"TryCreateAnimatedVisual\"/>" +
                " will return the AnimatedVisual. To use, set it when declaring the AnimatedVisualSource. Once" +
                " <see cref=\"TryCreateAnimatedVisual\"/> is called, changes made to this property will be ignored." +
                " Default value is true.");
            builder.Preamble.WriteLine("property bool IsAnimatedVisualSourceDynamic");
            builder.Preamble.OpenScope();
            builder.Preamble.WriteLine("bool get();");
            builder.Preamble.WriteLine("void set(bool value);");
            builder.Preamble.CloseScope();
            builder.Preamble.WriteSummaryComment("Returns true if all images have loaded. To see if the images succeeded to load," +
                " see <see cref=\"ImageSuccessfulLoadingProgress\"/>.");
            builder.Preamble.WriteLine("property bool IsImageLoadingCompleted");
            builder.Preamble.OpenScope();
            builder.Preamble.WriteLine("bool get() { return m_isImageLoadingCompleted; }");
            builder.Preamble.CloseScope();

            builder.Preamble.WriteSummaryComment("Represents the progress of successful image loading. Returns a value between" +
                " 0 and 1. 0 means none of the images succeeded to load. 1 means all images succeeded to load.");
            builder.Preamble.WriteLine("property double ImageSuccessfulLoadingProgress");
            builder.Preamble.OpenScope();
            builder.Preamble.WriteLine("double get() { return m_imageSuccessfulLoadingProgress; }");
            builder.Preamble.CloseScope();

            builder.Preamble.UnIndent();

            builder.Private.WriteLine($"const int c_loadedImageSurfaceCount = {SourceInfo.LoadedImageSurfaces.Distinct().Count()};");
            builder.Private.WriteLine("double m_imageSuccessfulLoadingProgress{};");
            builder.Private.WriteLine("int m_loadCompleteEventCount{};");
            builder.Private.WriteLine("bool m_isAnimatedVisualSourceDynamic{true};");
            builder.Private.WriteLine("bool m_isImageLoadingCompleted{}");
            builder.Private.WriteLine("bool m_isTryCreateAnimatedVisualCalled{}");
            builder.Private.WriteLine("bool m_isImageLoadingStarted{}");
            builder.Private.WriteLine($"event {_s.ReferenceTypeName($"Windows::Foundation::TypedEventHandler<{_s.ReferenceTypeName("IDynamicAnimatedVisualSource")}, {_typeName.Object}>")} m_InternalHandler;");

            foreach (var n in loadedImageSurfaceNodes)
            {
                builder.Private.WriteLine($"{_s.ReferenceTypeName(n.TypeName)} {n.FieldName}{{}};");
            }

            builder.Private.WriteLine("void EnsureImageLoadingStarted();");
            builder.Private.WriteLine($"void HandleLoadCompleted({_s.ReferenceTypeName("LoadedImageSurface")} sender, {_s.ReferenceTypeName("LoadedImageSourceLoadCompletedEventArgs")} e);");
            builder.Private.WriteLine($"void RaiseAnimatedVisualInvalidatedEvent({_s.ReferenceTypeName("IDynamicAnimatedVisualSource")} sender, {_typeName.Object} object)");
            builder.Private.OpenScope();
            builder.Private.OpenScope();
            builder.Private.WriteLine("m_InternalHandler::raise(sender, object);");
            builder.Private.CloseScope();
            builder.Private.CloseScope();
            builder.Private.CloseScope();
        }

        string CompositionEffectClass =>
@"

enum CanvasComposite : int
{
    SourceOver = 0,
    DestinationOver = 1,
    SourceIn = 2,
    DestinationIn = 3,
    SourceOut = 4,
    DestinationOut = 5,
    SourceAtop = 6,
    DestinationAtop = 7,
    Xor = 8,
    Add = 9,
    Copy = 10,
    BoundedCopy = 11,
    MaskInvert = 12,
};

// This class is a substitute for the Microsoft::Graphics::Canvas::Effects::CompositeEffect
// class so that composite effects can be used with 
// Windows::UI::Composition::CompositionEffectBrush without requiring Win2d. This is
// achieved by implementing the interfaces Windows::UI::Composition requires for it
// to consume an effect.
class CompositeEffect final :
    public ABI::Windows::Graphics::Effects::IGraphicsEffect,
    public ABI::Windows::Graphics::Effects::IGraphicsEffectSource,
    public ABI::Windows::Graphics::Effects::IGraphicsEffectD2D1Interop
{
public:
    void SetMode(CanvasComposite mode) { m_mode = mode; }

    void AddSource(IGraphicsEffectSource* source)
    {
        m_sources.emplace_back(Microsoft::WRL::ComPtr<IGraphicsEffectSource>(source));
    }

    // IGraphicsEffect
    IFACEMETHODIMP get_Name(HSTRING* name) override { return m_name.CopyTo(name); }

    IFACEMETHODIMP put_Name(HSTRING name) override { return m_name.Set(name); }

    // IGraphicsEffectD2D1Interop
    IFACEMETHODIMP GetEffectId(GUID* id) override 
    { 
        if (id != nullptr)
        {
            // set CLSID_D2D1Composite value
            *id = { 0x48fc9f51, 0xf6ac, 0x48f1, { 0x8b, 0x58,  0x3b,  0x28,  0xac,  0x46,  0xf7,  0x6d } };
        }

        return S_OK; 
    }

    IFACEMETHODIMP GetSourceCount(UINT* count) override
    {
        if (count != nullptr)
        {
            *count = static_cast<UINT>(m_sources.size());
        }

        return S_OK;
    }

    IFACEMETHODIMP GetSource(
        UINT index, 
        IGraphicsEffectSource** source) override
    {
        if (index >= m_sources.size() ||
            source == nullptr)
        {
            return E_INVALIDARG;
        }

        *source = m_sources.at(index).Get();
        (*source)->AddRef();

        return S_OK;
    }

    IFACEMETHODIMP GetPropertyCount(UINT * count) override { *count = 1; return S_OK; }

    IFACEMETHODIMP GetProperty(
        UINT index, 
        ABI::Windows::Foundation::IPropertyValue ** value) override
    {
        Microsoft::WRL::ComPtr<ABI::Windows::Foundation::IPropertyValueStatics> propertyValueFactory;
        Microsoft::WRL::Wrappers::HStringReference activatableClassId{ RuntimeClass_Windows_Foundation_PropertyValue };
        HRESULT hr = ABI::Windows::Foundation::GetActivationFactory(activatableClassId.Get(), &propertyValueFactory);

        if (SUCCEEDED(hr))
        {
            switch (index)
            {
                case D2D1_COMPOSITE_PROP_MODE: 
                    return propertyValueFactory->CreateUInt32(m_mode, (IInspectable**)value);
                default: 
                    return E_INVALIDARG;
            }
        }

        return hr;
    }

    IFACEMETHODIMP GetNamedPropertyMapping(
        LPCWSTR, 
        UINT*,
        ABI::Windows::Graphics::Effects::GRAPHICS_EFFECT_PROPERTY_MAPPING*) override
    {
        return E_INVALIDARG;
    }

    // IUnknown
    IFACEMETHODIMP QueryInterface(
        REFIID iid,
        void ** ppvObject) override
    {
        if (ppvObject != nullptr)
        {
            *ppvObject = nullptr;

            if (iid == __uuidof(IUnknown))
            {
                *ppvObject = static_cast<IUnknown*>(static_cast<IGraphicsEffect*>(this));
            }
            else if (iid == __uuidof(IInspectable))
            {
                *ppvObject = static_cast<IInspectable*>(static_cast<IGraphicsEffect*>(this));
            }
            else if (iid == __uuidof(IGraphicsEffect))
            {
                *ppvObject = static_cast<IGraphicsEffect*>(this);
            }
            else if (iid == __uuidof(IGraphicsEffectSource))
            {
                *ppvObject = static_cast<IGraphicsEffectSource*>(this);
            }
            else if (iid == __uuidof(IGraphicsEffectD2D1Interop))
            {
                *ppvObject = static_cast<IGraphicsEffectD2D1Interop*>(this);
            }

            if (*ppvObject != nullptr)
            {
                AddRef();
                return S_OK;
            }
        }

        return E_NOINTERFACE;
    }

    IFACEMETHODIMP_(ULONG) AddRef() override
    {
        return InterlockedIncrement(&m_cRef);
    }

    IFACEMETHODIMP_(ULONG) Release() override
    {
        ULONG cRef = InterlockedDecrement(&m_cRef);
        if (cRef == 0)
        {
            delete this;
        }

        return cRef;
    }

    // IInspectable
    IFACEMETHODIMP GetIids(
        ULONG * iidCount,
        IID ** iids) override
    {
        if (iidCount != nullptr)
        {
            *iidCount = 0;
        }

        if (iids != nullptr)
        {
            *iids = nullptr;
        }

        return E_NOTIMPL;
    }

    IFACEMETHODIMP GetRuntimeClassName(
        HSTRING * /*runtimeName*/) override
    {
        return E_NOTIMPL;
    }

    IFACEMETHODIMP GetTrustLevel(
        TrustLevel* trustLvl) override
    {
        if (trustLvl != nullptr)
        {
            *trustLvl = BaseTrust;
        }

        return S_OK;
    }

private:
    ULONG m_cRef = 0;

    CanvasComposite m_mode{};

    Microsoft::WRL::Wrappers::HString m_name{};

    std::vector<Microsoft::WRL::ComPtr<IGraphicsEffectSource>> m_sources;
};
";

        protected string QualifiedTypeName(PropertySetValueType propertySetValueType)
            => propertySetValueType switch
            {
                PropertySetValueType.Color => $"{WinUINamespace}::Color",
                _ => TypeName(propertySetValueType),
            };

        protected static string TypeName(PropertySetValueType propertySetValueType)
            => propertySetValueType switch
            {
                PropertySetValueType.Color => "Color",
                PropertySetValueType.Scalar => "float",
                PropertySetValueType.Vector2 => "float2",
                PropertySetValueType.Vector3 => "float3",
                PropertySetValueType.Vector4 => "float4",
                _ => throw new InvalidOperationException()
            };

        internal readonly struct TypeNames
        {
            internal TypeNames(Stringifier stringifier, bool isCppwinrtMode)
            {
                CompositionPropertySet = stringifier.ReferenceTypeName(nameof(CompositionPropertySet));
                Compositor = stringifier.ReferenceTypeName(nameof(Compositor));
                Object = isCppwinrtMode ? stringifier.ReferenceTypeName("IInspectable") : stringifier.ReferenceTypeName("Object");
                Visual = stringifier.ReferenceTypeName(nameof(Visual));
                IGeometrySource2D = "IGeometrySource2D";
            }

            internal string CompositionPropertySet { get; }

            internal string Compositor { get; }

            internal string IGeometrySource2D { get; }

            internal string Object { get; }

            internal string Visual { get; }
        }
    }
}
