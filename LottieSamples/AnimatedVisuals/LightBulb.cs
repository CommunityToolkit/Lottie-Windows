//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           6.1.0-build.57+gce5d302999
//       
//       Command:
//           LottieGen -Language CSharp -InputFile LightBulb.json
//       
//       Input file:
//           LightBulb.json (47562 bytes created 10:27-08:00 Feb 6 2020)
//       
//       Invoked on:
//           SIM10FRESH @ 12:40-07:00 May 14 2020
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |            80 |           72 |
// |--------------------------+---------------+--------------|
// | Animators                |            12 |           10 |
// | Animated brushes         |             2 |            2 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             1 |            1 |
// | PathKeyFrameAnimations   |             1 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             1 |            1 |
// | ShapeVisuals             |             1 |            1 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             2 |            2 |
// | CompositionSpriteShapes  |             8 |            8 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             3 |            3 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedVisuals
{
    // Name:        LightBulb
    // Frame rate:  60 fps
    // Frame count: 102
    // Duration:    1700.0 mS
    // ___________________________________________________________
    // |  Marker   |  Constant   | Frame | mS  |    Progress     |
    // |___________|_____________|_______|_____|_________________|
    // | Hover     | M_Hover     |   0.0 | 0.0 | 0F              |
    // | selection | M_selection |   0.0 | 0.3 | 0.000163398698F |
    // -----------------------------------------------------------
    sealed class LightBulb : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
    {
        // Animation duration: 1.700 seconds.
        internal const long c_durationTicks = 17000000;

        // Marker: Hover.
        internal const float M_Hover = 0F;

        // Marker: selection.
        internal const float M_selection = 0.000163398698F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                return
                    new AnimatedVisual_UAPv11(
                        compositor
                        );
            }

            if (AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                return
                    new AnimatedVisual_UAPv7(
                        compositor
                        );
            }

            return null;
        }

        sealed class AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 17000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_Black;
            CompositionPath _path;
            CompositionPathGeometry _pathGeometry_3;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            ColorKeyFrameAnimation CreateColorKeyFrameAnimation(float initialProgress, Color initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InterpolationColorSpace = CompositionColorSpace.Rgb;
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 1
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-1.43799996F, -120.887001F));
                    builder.AddCubicBezier(new Vector2(6.13999987F, -120.887001F), new Vector2(13.4449997F, -119.910004F), new Vector2(20.4759998F, -117.957001F));
                    builder.AddCubicBezier(new Vector2(27.507F, -116.003998F), new Vector2(34.0890007F, -113.231003F), new Vector2(40.2220001F, -109.637001F));
                    builder.AddCubicBezier(new Vector2(46.3549995F, -106.042999F), new Vector2(51.9210014F, -101.746002F), new Vector2(56.9210014F, -96.7460022F));
                    builder.AddCubicBezier(new Vector2(61.9210014F, -91.7460022F), new Vector2(66.2180023F, -86.1800003F), new Vector2(69.8119965F, -80.0469971F));
                    builder.AddCubicBezier(new Vector2(73.4059982F, -73.9140015F), new Vector2(76.1790009F, -67.3320007F), new Vector2(78.1320038F, -60.3009987F));
                    builder.AddCubicBezier(new Vector2(80.0849991F, -53.2700005F), new Vector2(81.0619965F, -45.9650002F), new Vector2(81.0619965F, -38.387001F));
                    builder.AddCubicBezier(new Vector2(81.0619965F, -27.059F), new Vector2(78.9140015F, -16.5510006F), new Vector2(74.6169968F, -6.86299992F));
                    builder.AddCubicBezier(new Vector2(70.3199997F, 2.82500005F), new Vector2(64.1869965F, 11.6129999F), new Vector2(56.2179985F, 19.5039997F));
                    builder.AddCubicBezier(new Vector2(49.7340012F, 25.9099998F), new Vector2(44.7540016F, 33.0579987F), new Vector2(41.2770004F, 40.9490013F));
                    builder.AddCubicBezier(new Vector2(37.7999992F, 48.8400002F), new Vector2(36.0620003F, 57.394001F), new Vector2(36.0620003F, 66.612999F));
                    builder.AddLine(new Vector2(36.0620003F, 96.612999F));
                    builder.AddCubicBezier(new Vector2(36.0620003F, 99.737999F), new Vector2(35.4760017F, 102.667999F), new Vector2(34.3040009F, 105.402F));
                    builder.AddCubicBezier(new Vector2(33.132F, 108.136002F), new Vector2(31.5310001F, 110.519997F), new Vector2(29.5F, 112.551003F));
                    builder.AddCubicBezier(new Vector2(27.4689999F, 114.582001F), new Vector2(25.0849991F, 116.182999F), new Vector2(22.3509998F, 117.355003F));
                    builder.AddCubicBezier(new Vector2(19.6170006F, 118.527F), new Vector2(16.6870003F, 119.112999F), new Vector2(13.5620003F, 119.112999F));
                    builder.AddLine(new Vector2(-16.4379997F, 119.112999F));
                    builder.AddCubicBezier(new Vector2(-19.5629997F, 119.112999F), new Vector2(-22.493F, 118.527F), new Vector2(-25.2269993F, 117.355003F));
                    builder.AddCubicBezier(new Vector2(-27.9610004F, 116.182999F), new Vector2(-30.3439999F, 114.582001F), new Vector2(-32.375F, 112.551003F));
                    builder.AddCubicBezier(new Vector2(-34.4059982F, 110.519997F), new Vector2(-36.0079994F, 108.136002F), new Vector2(-37.1800003F, 105.402F));
                    builder.AddCubicBezier(new Vector2(-38.3520012F, 102.667999F), new Vector2(-38.9379997F, 99.737999F), new Vector2(-38.9379997F, 96.612999F));
                    builder.AddLine(new Vector2(-38.9379997F, 66.612999F));
                    builder.AddCubicBezier(new Vector2(-38.9379997F, 57.394001F), new Vector2(-40.6759987F, 48.8400002F), new Vector2(-44.1529999F, 40.9490013F));
                    builder.AddCubicBezier(new Vector2(-47.6300011F, 33.0579987F), new Vector2(-52.6100006F, 25.9099998F), new Vector2(-59.0940018F, 19.5039997F));
                    builder.AddCubicBezier(new Vector2(-67.0630035F, 11.6129999F), new Vector2(-73.1959991F, 2.82500005F), new Vector2(-77.4929962F, -6.86299992F));
                    builder.AddCubicBezier(new Vector2(-81.7900009F, -16.5510006F), new Vector2(-83.9380035F, -27.059F), new Vector2(-83.9380035F, -38.387001F));
                    builder.AddCubicBezier(new Vector2(-83.9380035F, -45.9650002F), new Vector2(-82.9609985F, -53.2700005F), new Vector2(-81.0080032F, -60.3009987F));
                    builder.AddCubicBezier(new Vector2(-79.0550003F, -67.3320007F), new Vector2(-76.2819977F, -73.9140015F), new Vector2(-72.6880035F, -80.0469971F));
                    builder.AddCubicBezier(new Vector2(-69.0940018F, -86.1800003F), new Vector2(-64.7969971F, -91.7460022F), new Vector2(-59.7970009F, -96.7460022F));
                    builder.AddCubicBezier(new Vector2(-54.7970009F, -101.746002F), new Vector2(-49.230999F, -106.042999F), new Vector2(-43.0979996F, -109.637001F));
                    builder.AddCubicBezier(new Vector2(-36.9650002F, -113.231003F), new Vector2(-30.3829994F, -116.003998F), new Vector2(-23.3519993F, -117.957001F));
                    builder.AddCubicBezier(new Vector2(-16.3209991F, -119.910004F), new Vector2(-9.01599979F, -120.887001F), new Vector2(-1.43799996F, -120.887001F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - Transforms: default fill 2
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(21.4139996F, 59.112999F));
                    builder.AddCubicBezier(new Vector2(22.4300003F, 49.0349998F), new Vector2(25.007F, 39.894001F), new Vector2(29.1480007F, 31.691F));
                    builder.AddCubicBezier(new Vector2(33.2890015F, 23.4880009F), new Vector2(38.875F, 15.8319998F), new Vector2(45.9059982F, 8.72299957F));
                    builder.AddCubicBezier(new Vector2(52.3899994F, 2.16000009F), new Vector2(57.3699989F, -5.0079999F), new Vector2(60.8470001F, -12.7810001F));
                    builder.AddCubicBezier(new Vector2(64.3239975F, -20.5540009F), new Vector2(66.0619965F, -29.0900002F), new Vector2(66.0619965F, -38.387001F));
                    builder.AddCubicBezier(new Vector2(66.0619965F, -47.6839981F), new Vector2(64.2850037F, -56.4339981F), new Vector2(60.7299995F, -64.637001F));
                    builder.AddCubicBezier(new Vector2(57.1749992F, -72.8399963F), new Vector2(52.3510017F, -79.987999F), new Vector2(46.257F, -86.0820007F));
                    builder.AddCubicBezier(new Vector2(40.1629982F, -92.1760025F), new Vector2(33.0149994F, -97F), new Vector2(24.8120003F, -100.555F));
                    builder.AddCubicBezier(new Vector2(16.6089993F, -104.110001F), new Vector2(7.85900021F, -105.887001F), new Vector2(-1.43799996F, -105.887001F));
                    builder.AddCubicBezier(new Vector2(-10.7349997F, -105.887001F), new Vector2(-19.4850006F, -104.110001F), new Vector2(-27.6879997F, -100.555F));
                    builder.AddCubicBezier(new Vector2(-35.8909988F, -97F), new Vector2(-43.0390015F, -92.1760025F), new Vector2(-49.1329994F, -86.0820007F));
                    builder.AddCubicBezier(new Vector2(-55.2270012F, -79.987999F), new Vector2(-60.0509987F, -72.8399963F), new Vector2(-63.605999F, -64.637001F));
                    builder.AddCubicBezier(new Vector2(-67.1610031F, -56.4339981F), new Vector2(-68.9380035F, -47.6839981F), new Vector2(-68.9380035F, -38.387001F));
                    builder.AddCubicBezier(new Vector2(-68.9380035F, -29.0900002F), new Vector2(-67.1999969F, -20.5540009F), new Vector2(-63.7229996F, -12.7810001F));
                    builder.AddCubicBezier(new Vector2(-60.2459984F, -5.0079999F), new Vector2(-55.2659988F, 2.16000009F), new Vector2(-48.7820015F, 8.72299957F));
                    builder.AddCubicBezier(new Vector2(-41.7509995F, 15.8319998F), new Vector2(-36.1650009F, 23.4880009F), new Vector2(-32.0239983F, 31.691F));
                    builder.AddCubicBezier(new Vector2(-27.8829994F, 39.894001F), new Vector2(-25.3059998F, 49.0349998F), new Vector2(-24.2900009F, 59.112999F));
                    builder.AddLine(new Vector2(21.4139996F, 59.112999F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - Transforms: default fill 3
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(13.5620003F, 104.112999F));
                    builder.AddCubicBezier(new Vector2(15.5930004F, 104.112999F), new Vector2(17.3509998F, 103.371002F), new Vector2(18.8349991F, 101.887001F));
                    builder.AddCubicBezier(new Vector2(20.3190002F, 100.403F), new Vector2(21.0620003F, 98.6439972F), new Vector2(21.0620003F, 96.612999F));
                    builder.AddLine(new Vector2(21.0620003F, 74.112999F));
                    builder.AddLine(new Vector2(-23.9379997F, 74.112999F));
                    builder.AddLine(new Vector2(-23.9379997F, 96.612999F));
                    builder.AddCubicBezier(new Vector2(-23.9379997F, 98.6439972F), new Vector2(-23.1949997F, 100.403F), new Vector2(-21.7110004F, 101.887001F));
                    builder.AddCubicBezier(new Vector2(-20.2269993F, 103.371002F), new Vector2(-18.4689999F, 104.112999F), new Vector2(-16.4379997F, 104.112999F));
                    builder.AddLine(new Vector2(13.5620003F, 104.112999F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-2F, -83.75F));
                    builder.AddCubicBezier(new Vector2(-2F, -83.75F), new Vector2(-2F, -81F), new Vector2(-2F, -81F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-2F, -131.25F));
                    builder.AddCubicBezier(new Vector2(-2F, -131.25F), new Vector2(-2F, -81F), new Vector2(-2F, -81F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-2F, -131.25F));
                    builder.AddCubicBezier(new Vector2(-2F, -131.25F), new Vector2(-2F, -131.25F), new Vector2(-2F, -131.25F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - Transforms: default fill 2
            // Color
            ColorKeyFrameAnimation ColorAnimation_White_to_AlmostKhaki_FFFFEC64()
            {
                var result = CreateColorKeyFrameAnimation(0F, Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF), StepThenHoldEasingFunction());
                // White
                result.InsertKeyFrame(0.676470578F, Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF), HoldThenStepEasingFunction());
                // AlmostKhaki_FFFFEC64
                result.InsertKeyFrame(0.686274529F, Color.FromArgb(0xFF, 0xFF, 0xEC, 0x64), CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - Transforms: default fill 3
            // Color
            ColorKeyFrameAnimation ColorAnimation_White_to_AlmostLightGray_FFD1D1D1()
            {
                var result = CreateColorKeyFrameAnimation(0F, Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _stepThenHoldEasingFunction);
                // White
                result.InsertKeyFrame(0.676470578F, Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _holdThenStepEasingFunction);
                // AlmostLightGray_FFD1D1D1
                result.InsertKeyFrame(0.686274529F, Color.FromArgb(0xFF, 0xD1, 0xD1, 0xD1), _cubicBezierEasingFunction_0);
                return result;
            }

            // - - Layer aggregator
            // Transforms: default fill 2
            CompositionColorBrush AnimatedColorBrush_White_to_AlmostKhaki_FFFFEC64()
            {
                var result = _c.CreateColorBrush();
                StartProgressBoundAnimation(result, "Color", ColorAnimation_White_to_AlmostKhaki_FFFFEC64(), RootProgress());
                return result;
            }

            // - - Layer aggregator
            // Transforms: default fill 3
            CompositionColorBrush AnimatedColorBrush_White_to_AlmostLightGray_FFD1D1D1()
            {
                var result = _c.CreateColorBrush();
                StartProgressBoundAnimation(result, "Color", ColorAnimation_White_to_AlmostLightGray_FFD1D1D1(), _rootProgress);
                return result;
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 90F);
                result.Offset = new Vector2(140F, 140F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_0());
                // Transforms: default fill 2
                shapes.Add(SpriteShape_1());
                // Transforms: default fill 3
                shapes.Add(SpriteShape_2());
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), _rootProgress);
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Layer: Shape Layer 1
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                var shapes = result.Shapes;
                // Offset:<140, 140>
                shapes.Add(SpriteShape_3());
                // RotationDegrees:45, Offset:<140, 140>
                shapes.Add(SpriteShape_4());
                // RotationDegrees:-45, Offset:<140, 140>
                shapes.Add(SpriteShape_5());
                // RotationDegrees:85, Offset:<140, 140>
                shapes.Add(SpriteShape_6());
                // RotationDegrees:-85, Offset:<140, 140>
                shapes.Add(SpriteShape_7());
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation(), _rootProgress);
                return result;
            }

            CompositionPath Path()
            {
                var result = _path = new CompositionPath(Geometry_3());
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Group 1
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                return result;
            }

            // - - Layer aggregator
            // Transforms: default fill 2
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
                return result;
            }

            // - - Layer aggregator
            // Transforms: default fill 3
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_3()
            {
                var result = _pathGeometry_3 = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_0(), _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = ColorBrush_Black();
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = AnimatedColorBrush_White_to_AlmostKhaki_FFFFEC64();
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.FillBrush = AnimatedColorBrush_White_to_AlmostLightGray_FFD1D1D1();
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<140, 140>
                var result = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(1F, 0F, 0F, 1F, 140F, 140F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<140, 140>, Rotation:44.99999927302816 degrees,
                // Scale:<0.99999994, 0.99999994>
                var result = CreateSpriteShape(_pathGeometry_3, new Matrix3x2(0.707106769F, 0.707106769F, -0.707106769F, 0.707106769F, 140F, 140F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<140, 140>, Rotation:-44.99999927302816 degrees,
                // Scale:<0.99999994, 0.99999994>
                var result = CreateSpriteShape(_pathGeometry_3, new Matrix3x2(0.707106769F, -0.707106769F, 0.707106769F, 0.707106769F, 140F, 140F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Path 1
            CompositionSpriteShape SpriteShape_6()
            {
                // Offset:<140, 140>, Rotation:84.9999964749053 degrees
                var result = CreateSpriteShape(_pathGeometry_3, new Matrix3x2(0.087155804F, 0.99619472F, -0.99619472F, 0.087155804F, 140F, 140F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Path 1
            CompositionSpriteShape SpriteShape_7()
            {
                // Offset:<140, 140>, Rotation:-84.9999964749053 degrees
                var result = CreateSpriteShape(_pathGeometry_3, new Matrix3x2(0.087155804F, -0.99619472F, 0.99619472F, 0.087155804F, 140F, 140F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.649999976F, 0F), new Vector2(0.349999994F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Path 1.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                var result = CreatePathKeyFrameAnimation(0F, Path(), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.627451003F, _path, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.725490212F, new CompositionPath(Geometry_4()), _c.CreateCubicBezierEasingFunction(new Vector2(0.850000024F, 0F), new Vector2(0.666999996F, 1F)));
                result.InsertKeyFrame(0.823529422F, new CompositionPath(Geometry_5()), _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.150000006F, 1F)));
                return result;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.0588235296F, -15F, CubicBezierEasingFunction_1());
                result.InsertKeyFrame(0.117647059F, 15F, _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(0.176470593F, -15F, _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(0.235294119F, 0F, _cubicBezierEasingFunction_1);
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(280F, 280F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_0());
                // Layer: Shape Layer 1
                shapes.Add(ContainerShape_1());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.588235319F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.686274529F, new Vector2(0.600000024F, 0.600000024F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0F, 1F)));
                result.InsertKeyFrame(0.882352948F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(1F, 0F), new Vector2(0.833000004F, 0.833000004F)));
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            Vector2KeyFrameAnimation ShapeVisibilityAnimation()
            {
                var result = CreateVector2KeyFrameAnimation(0.627451003F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.843137264F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            internal AnimatedVisual_UAPv11(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(280F, 280F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }

        sealed class AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 17000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_Black;
            CompositionPathGeometry _pathGeometry_3;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            ColorKeyFrameAnimation CreateColorKeyFrameAnimation(float initialProgress, Color initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InterpolationColorSpace = CompositionColorSpace.Rgb;
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            // - - - - Layer aggregator
            // - - ShapeGroup: Group 1
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-1.43799996F, -120.887001F));
                    builder.AddCubicBezier(new Vector2(6.13999987F, -120.887001F), new Vector2(13.4449997F, -119.910004F), new Vector2(20.4759998F, -117.957001F));
                    builder.AddCubicBezier(new Vector2(27.507F, -116.003998F), new Vector2(34.0890007F, -113.231003F), new Vector2(40.2220001F, -109.637001F));
                    builder.AddCubicBezier(new Vector2(46.3549995F, -106.042999F), new Vector2(51.9210014F, -101.746002F), new Vector2(56.9210014F, -96.7460022F));
                    builder.AddCubicBezier(new Vector2(61.9210014F, -91.7460022F), new Vector2(66.2180023F, -86.1800003F), new Vector2(69.8119965F, -80.0469971F));
                    builder.AddCubicBezier(new Vector2(73.4059982F, -73.9140015F), new Vector2(76.1790009F, -67.3320007F), new Vector2(78.1320038F, -60.3009987F));
                    builder.AddCubicBezier(new Vector2(80.0849991F, -53.2700005F), new Vector2(81.0619965F, -45.9650002F), new Vector2(81.0619965F, -38.387001F));
                    builder.AddCubicBezier(new Vector2(81.0619965F, -27.059F), new Vector2(78.9140015F, -16.5510006F), new Vector2(74.6169968F, -6.86299992F));
                    builder.AddCubicBezier(new Vector2(70.3199997F, 2.82500005F), new Vector2(64.1869965F, 11.6129999F), new Vector2(56.2179985F, 19.5039997F));
                    builder.AddCubicBezier(new Vector2(49.7340012F, 25.9099998F), new Vector2(44.7540016F, 33.0579987F), new Vector2(41.2770004F, 40.9490013F));
                    builder.AddCubicBezier(new Vector2(37.7999992F, 48.8400002F), new Vector2(36.0620003F, 57.394001F), new Vector2(36.0620003F, 66.612999F));
                    builder.AddLine(new Vector2(36.0620003F, 96.612999F));
                    builder.AddCubicBezier(new Vector2(36.0620003F, 99.737999F), new Vector2(35.4760017F, 102.667999F), new Vector2(34.3040009F, 105.402F));
                    builder.AddCubicBezier(new Vector2(33.132F, 108.136002F), new Vector2(31.5310001F, 110.519997F), new Vector2(29.5F, 112.551003F));
                    builder.AddCubicBezier(new Vector2(27.4689999F, 114.582001F), new Vector2(25.0849991F, 116.182999F), new Vector2(22.3509998F, 117.355003F));
                    builder.AddCubicBezier(new Vector2(19.6170006F, 118.527F), new Vector2(16.6870003F, 119.112999F), new Vector2(13.5620003F, 119.112999F));
                    builder.AddLine(new Vector2(-16.4379997F, 119.112999F));
                    builder.AddCubicBezier(new Vector2(-19.5629997F, 119.112999F), new Vector2(-22.493F, 118.527F), new Vector2(-25.2269993F, 117.355003F));
                    builder.AddCubicBezier(new Vector2(-27.9610004F, 116.182999F), new Vector2(-30.3439999F, 114.582001F), new Vector2(-32.375F, 112.551003F));
                    builder.AddCubicBezier(new Vector2(-34.4059982F, 110.519997F), new Vector2(-36.0079994F, 108.136002F), new Vector2(-37.1800003F, 105.402F));
                    builder.AddCubicBezier(new Vector2(-38.3520012F, 102.667999F), new Vector2(-38.9379997F, 99.737999F), new Vector2(-38.9379997F, 96.612999F));
                    builder.AddLine(new Vector2(-38.9379997F, 66.612999F));
                    builder.AddCubicBezier(new Vector2(-38.9379997F, 57.394001F), new Vector2(-40.6759987F, 48.8400002F), new Vector2(-44.1529999F, 40.9490013F));
                    builder.AddCubicBezier(new Vector2(-47.6300011F, 33.0579987F), new Vector2(-52.6100006F, 25.9099998F), new Vector2(-59.0940018F, 19.5039997F));
                    builder.AddCubicBezier(new Vector2(-67.0630035F, 11.6129999F), new Vector2(-73.1959991F, 2.82500005F), new Vector2(-77.4929962F, -6.86299992F));
                    builder.AddCubicBezier(new Vector2(-81.7900009F, -16.5510006F), new Vector2(-83.9380035F, -27.059F), new Vector2(-83.9380035F, -38.387001F));
                    builder.AddCubicBezier(new Vector2(-83.9380035F, -45.9650002F), new Vector2(-82.9609985F, -53.2700005F), new Vector2(-81.0080032F, -60.3009987F));
                    builder.AddCubicBezier(new Vector2(-79.0550003F, -67.3320007F), new Vector2(-76.2819977F, -73.9140015F), new Vector2(-72.6880035F, -80.0469971F));
                    builder.AddCubicBezier(new Vector2(-69.0940018F, -86.1800003F), new Vector2(-64.7969971F, -91.7460022F), new Vector2(-59.7970009F, -96.7460022F));
                    builder.AddCubicBezier(new Vector2(-54.7970009F, -101.746002F), new Vector2(-49.230999F, -106.042999F), new Vector2(-43.0979996F, -109.637001F));
                    builder.AddCubicBezier(new Vector2(-36.9650002F, -113.231003F), new Vector2(-30.3829994F, -116.003998F), new Vector2(-23.3519993F, -117.957001F));
                    builder.AddCubicBezier(new Vector2(-16.3209991F, -119.910004F), new Vector2(-9.01599979F, -120.887001F), new Vector2(-1.43799996F, -120.887001F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - Transforms: default fill 2
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(21.4139996F, 59.112999F));
                    builder.AddCubicBezier(new Vector2(22.4300003F, 49.0349998F), new Vector2(25.007F, 39.894001F), new Vector2(29.1480007F, 31.691F));
                    builder.AddCubicBezier(new Vector2(33.2890015F, 23.4880009F), new Vector2(38.875F, 15.8319998F), new Vector2(45.9059982F, 8.72299957F));
                    builder.AddCubicBezier(new Vector2(52.3899994F, 2.16000009F), new Vector2(57.3699989F, -5.0079999F), new Vector2(60.8470001F, -12.7810001F));
                    builder.AddCubicBezier(new Vector2(64.3239975F, -20.5540009F), new Vector2(66.0619965F, -29.0900002F), new Vector2(66.0619965F, -38.387001F));
                    builder.AddCubicBezier(new Vector2(66.0619965F, -47.6839981F), new Vector2(64.2850037F, -56.4339981F), new Vector2(60.7299995F, -64.637001F));
                    builder.AddCubicBezier(new Vector2(57.1749992F, -72.8399963F), new Vector2(52.3510017F, -79.987999F), new Vector2(46.257F, -86.0820007F));
                    builder.AddCubicBezier(new Vector2(40.1629982F, -92.1760025F), new Vector2(33.0149994F, -97F), new Vector2(24.8120003F, -100.555F));
                    builder.AddCubicBezier(new Vector2(16.6089993F, -104.110001F), new Vector2(7.85900021F, -105.887001F), new Vector2(-1.43799996F, -105.887001F));
                    builder.AddCubicBezier(new Vector2(-10.7349997F, -105.887001F), new Vector2(-19.4850006F, -104.110001F), new Vector2(-27.6879997F, -100.555F));
                    builder.AddCubicBezier(new Vector2(-35.8909988F, -97F), new Vector2(-43.0390015F, -92.1760025F), new Vector2(-49.1329994F, -86.0820007F));
                    builder.AddCubicBezier(new Vector2(-55.2270012F, -79.987999F), new Vector2(-60.0509987F, -72.8399963F), new Vector2(-63.605999F, -64.637001F));
                    builder.AddCubicBezier(new Vector2(-67.1610031F, -56.4339981F), new Vector2(-68.9380035F, -47.6839981F), new Vector2(-68.9380035F, -38.387001F));
                    builder.AddCubicBezier(new Vector2(-68.9380035F, -29.0900002F), new Vector2(-67.1999969F, -20.5540009F), new Vector2(-63.7229996F, -12.7810001F));
                    builder.AddCubicBezier(new Vector2(-60.2459984F, -5.0079999F), new Vector2(-55.2659988F, 2.16000009F), new Vector2(-48.7820015F, 8.72299957F));
                    builder.AddCubicBezier(new Vector2(-41.7509995F, 15.8319998F), new Vector2(-36.1650009F, 23.4880009F), new Vector2(-32.0239983F, 31.691F));
                    builder.AddCubicBezier(new Vector2(-27.8829994F, 39.894001F), new Vector2(-25.3059998F, 49.0349998F), new Vector2(-24.2900009F, 59.112999F));
                    builder.AddLine(new Vector2(21.4139996F, 59.112999F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - Transforms: default fill 3
            // - Path 1.PathGeometry
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(13.5620003F, 104.112999F));
                    builder.AddCubicBezier(new Vector2(15.5930004F, 104.112999F), new Vector2(17.3509998F, 103.371002F), new Vector2(18.8349991F, 101.887001F));
                    builder.AddCubicBezier(new Vector2(20.3190002F, 100.403F), new Vector2(21.0620003F, 98.6439972F), new Vector2(21.0620003F, 96.612999F));
                    builder.AddLine(new Vector2(21.0620003F, 74.112999F));
                    builder.AddLine(new Vector2(-23.9379997F, 74.112999F));
                    builder.AddLine(new Vector2(-23.9379997F, 96.612999F));
                    builder.AddCubicBezier(new Vector2(-23.9379997F, 98.6439972F), new Vector2(-23.1949997F, 100.403F), new Vector2(-21.7110004F, 101.887001F));
                    builder.AddCubicBezier(new Vector2(-20.2269993F, 103.371002F), new Vector2(-18.4689999F, 104.112999F), new Vector2(-16.4379997F, 104.112999F));
                    builder.AddLine(new Vector2(13.5620003F, 104.112999F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Path 1.PathGeometry
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-2F, -83.75F));
                    builder.AddLine(new Vector2(-2F, -81F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - Transforms: default fill 2
            // Color
            ColorKeyFrameAnimation ColorAnimation_White_to_AlmostKhaki_FFFFEC64()
            {
                var result = CreateColorKeyFrameAnimation(0F, Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF), StepThenHoldEasingFunction());
                // White
                result.InsertKeyFrame(0.676470578F, Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF), HoldThenStepEasingFunction());
                // AlmostKhaki_FFFFEC64
                result.InsertKeyFrame(0.686274529F, Color.FromArgb(0xFF, 0xFF, 0xEC, 0x64), CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - Transforms: default fill 3
            // Color
            ColorKeyFrameAnimation ColorAnimation_White_to_AlmostLightGray_FFD1D1D1()
            {
                var result = CreateColorKeyFrameAnimation(0F, Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _stepThenHoldEasingFunction);
                // White
                result.InsertKeyFrame(0.676470578F, Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _holdThenStepEasingFunction);
                // AlmostLightGray_FFD1D1D1
                result.InsertKeyFrame(0.686274529F, Color.FromArgb(0xFF, 0xD1, 0xD1, 0xD1), _cubicBezierEasingFunction_0);
                return result;
            }

            // - - Layer aggregator
            // Transforms: default fill 2
            CompositionColorBrush AnimatedColorBrush_White_to_AlmostKhaki_FFFFEC64()
            {
                var result = _c.CreateColorBrush();
                StartProgressBoundAnimation(result, "Color", ColorAnimation_White_to_AlmostKhaki_FFFFEC64(), RootProgress());
                return result;
            }

            // - - Layer aggregator
            // Transforms: default fill 3
            CompositionColorBrush AnimatedColorBrush_White_to_AlmostLightGray_FFD1D1D1()
            {
                var result = _c.CreateColorBrush();
                StartProgressBoundAnimation(result, "Color", ColorAnimation_White_to_AlmostLightGray_FFD1D1D1(), _rootProgress);
                return result;
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 90F);
                result.Offset = new Vector2(140F, 140F);
                var shapes = result.Shapes;
                // ShapeGroup: Group 1
                shapes.Add(SpriteShape_0());
                // Transforms: default fill 2
                shapes.Add(SpriteShape_1());
                // Transforms: default fill 3
                shapes.Add(SpriteShape_2());
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), _rootProgress);
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Layer: Shape Layer 1
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                var shapes = result.Shapes;
                // Offset:<140, 140>
                shapes.Add(SpriteShape_3());
                // RotationDegrees:45, Offset:<140, 140>
                shapes.Add(SpriteShape_4());
                // RotationDegrees:-45, Offset:<140, 140>
                shapes.Add(SpriteShape_5());
                // RotationDegrees:85, Offset:<140, 140>
                shapes.Add(SpriteShape_6());
                // RotationDegrees:-85, Offset:<140, 140>
                shapes.Add(SpriteShape_7());
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation(), _rootProgress);
                return result;
            }

            // - - Layer aggregator
            // ShapeGroup: Group 1
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                return result;
            }

            // - - Layer aggregator
            // Transforms: default fill 2
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
                return result;
            }

            // - - Layer aggregator
            // Transforms: default fill 3
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_3()
            {
                var result = _pathGeometry_3 = _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = ColorBrush_Black();
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = AnimatedColorBrush_White_to_AlmostKhaki_FFFFEC64();
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.FillBrush = AnimatedColorBrush_White_to_AlmostLightGray_FFD1D1D1();
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<140, 140>
                var result = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(1F, 0F, 0F, 1F, 140F, 140F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<140, 140>, Rotation:44.99999927302816 degrees,
                // Scale:<0.99999994, 0.99999994>
                var result = CreateSpriteShape(_pathGeometry_3, new Matrix3x2(0.707106769F, 0.707106769F, -0.707106769F, 0.707106769F, 140F, 140F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<140, 140>, Rotation:-44.99999927302816 degrees,
                // Scale:<0.99999994, 0.99999994>
                var result = CreateSpriteShape(_pathGeometry_3, new Matrix3x2(0.707106769F, -0.707106769F, 0.707106769F, 0.707106769F, 140F, 140F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Path 1
            CompositionSpriteShape SpriteShape_6()
            {
                // Offset:<140, 140>, Rotation:84.9999964749053 degrees
                var result = CreateSpriteShape(_pathGeometry_3, new Matrix3x2(0.087155804F, 0.99619472F, -0.99619472F, 0.087155804F, 140F, 140F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Path 1
            CompositionSpriteShape SpriteShape_7()
            {
                // Offset:<140, 140>, Rotation:-84.9999964749053 degrees
                var result = CreateSpriteShape(_pathGeometry_3, new Matrix3x2(0.087155804F, -0.99619472F, 0.99619472F, 0.087155804F, 140F, 140F));
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.649999976F, 0F), new Vector2(0.349999994F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.0588235296F, -15F, CubicBezierEasingFunction_1());
                result.InsertKeyFrame(0.117647059F, 15F, _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(0.176470593F, -15F, _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(0.235294119F, 0F, _cubicBezierEasingFunction_1);
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(280F, 280F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_0());
                // Layer: Shape Layer 1
                shapes.Add(ContainerShape_1());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.588235319F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.686274529F, new Vector2(0.600000024F, 0.600000024F), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0F, 1F)));
                result.InsertKeyFrame(0.882352948F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(1F, 0F), new Vector2(0.833000004F, 0.833000004F)));
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            Vector2KeyFrameAnimation ShapeVisibilityAnimation()
            {
                var result = CreateVector2KeyFrameAnimation(0.627451003F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.843137264F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            internal AnimatedVisual_UAPv7(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(280F, 280F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
