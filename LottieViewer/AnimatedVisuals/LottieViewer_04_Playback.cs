//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.66+ged58095f63
//       
//       Command:
//           LottieGen -Language CSharp -MinimumUapVersion 11 -InputFile LottieViewer_04_Playback.json
//       
//       Input file:
//           LottieViewer_04_Playback.json (5185 bytes created 17:06-08:00 Nov 10 2020)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    65 |
// |--------------------------+-------|
// | Expression animators     |     9 |
// | KeyFrame animators       |     8 |
// | Reference parameters     |     9 |
// | Expression operations    |     4 |
// |--------------------------+-------|
// | Animated brushes         |     1 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     2 |
// | PathKeyFrameAnimations   |     2 |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     4 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedVisuals
{
    // Name:        LottieViewer_04_Playback
    // Frame rate:  60 fps
    // Frame count: 80
    // Duration:    1333.3 mS
    // _____________________________________________________________________
    // |     Marker     |     Constant     | Frame |   mS   |   Progress   |
    // |________________|__________________|_______|________|______________|
    // | Play_Hover_On  | M_Play_Hover_On  |   0.0 |    0.0 | 0F           |
    // | Play_Hover_Off | M_Play_Hover_Off |  19.0 |  316.7 | 0.237499997F |
    // | Play_Click_On  | M_Play_Click_On  |  20.0 |  333.3 | 0.25F        |
    // | Play_Click_Off | M_Play_Click_Off |  40.0 |  666.7 | 0.5F         |
    // | Stop_Hover_On  | M_Stop_Hover_On  |  41.0 |  683.3 | 0.512499988F |
    // | Stop_Hover_Off | M_Stop_Hover_Off |  59.0 |  983.3 | 0.737500012F |
    // | Stop_Click_On  | M_Stop_Click_On  |  60.0 | 1000.0 | 0.75F        |
    // | Stop_Click_Off | M_Stop_Click_Off |  79.0 | 1316.7 | 0.987500012F |
    // ---------------------------------------------------------------------
    // _________________________________________________________
    // | Theme property |  Accessor  | Type  |  Default value  |
    // |________________|____________|_______|_________________|
    // | Foreground     | Foreground | Color | #FF000000 Black |
    // ---------------------------------------------------------
    sealed class LottieViewer_04_Playback
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
    {
        // Animation duration: 1.333 seconds.
        internal const long c_durationTicks = 13333333;

        // Marker: Play_Hover_On.
        internal const float M_Play_Hover_On = 0F;

        // Marker: Play_Hover_Off.
        internal const float M_Play_Hover_Off = 0.237499997F;

        // Marker: Play_Click_On.
        internal const float M_Play_Click_On = 0.25F;

        // Marker: Play_Click_Off.
        internal const float M_Play_Click_Off = 0.5F;

        // Marker: Stop_Hover_On.
        internal const float M_Stop_Hover_On = 0.512499988F;

        // Marker: Stop_Hover_Off.
        internal const float M_Stop_Hover_Off = 0.737500012F;

        // Marker: Stop_Click_On.
        internal const float M_Stop_Click_On = 0.75F;

        // Marker: Stop_Click_Off.
        internal const float M_Stop_Click_Off = 0.987500012F;

        // Theme property: Foreground.
        internal static readonly Color c_themeForeground = Color.FromArgb(0xFF, 0x00, 0x00, 0x00);

        CompositionPropertySet _themeProperties;
        Color _themeForeground = c_themeForeground;

        // Theme properties.
        public Color Foreground
        {
            get => _themeForeground;
            set
            {
                _themeForeground = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)_themeForeground));
                }
            }
        }

        static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties is null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)Foreground));
            }
            return _themeProperties;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (LottieViewer_04_Playback_AnimatedVisual.IsRuntimeCompatible())
            {
                return
                    new LottieViewer_04_Playback_AnimatedVisual(
                        compositor,
                        _themeProperties
                        );
            }

            return null;
        }

        /// <summary>
        /// Converts a frame number to the corresponding progress value.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 80d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "Play_Hover_On", 0d },
                { "Play_Hover_Off", 0.2375 },
                { "Play_Click_On", 0.25 },
                { "Play_Click_Off", 0.5 },
                { "Stop_Hover_On", 0.5125 },
                { "Stop_Hover_Off", 0.7375 },
                { "Stop_Click_On", 0.75 },
                { "Stop_Click_Off", 0.9875 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
            if (propertyName == "Foreground")
            {
                _themeForeground = value;
            }
            else
            {
                return;
            }

            if (_themeProperties != null)
            {
                _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
            }
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class LottieViewer_04_Playback_AnimatedVisual : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 13333333;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Foreground;
            CompositionPath _path_0;
            CompositionPath _path_1;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-23.625F, -23.75F));
                    builder.AddCubicBezier(new Vector2(-23.625F, -23.75F), new Vector2(-23.5629997F, 24.25F), new Vector2(-23.5629997F, 24.25F));
                    builder.AddCubicBezier(new Vector2(-23.5629997F, 24.25F), new Vector2(24.25F, 24.375F), new Vector2(24.25F, 24.375F));
                    builder.AddCubicBezier(new Vector2(24.25F, 24.375F), new Vector2(24.0690002F, -23.8500004F), new Vector2(24.0690002F, -23.8500004F));
                    builder.AddCubicBezier(new Vector2(24.0690002F, -23.8500004F), new Vector2(-23.625F, -23.75F), new Vector2(-23.625F, -23.75F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-14F, -23.625F));
                    builder.AddCubicBezier(new Vector2(-14F, -23.625F), new Vector2(-14F, 24.375F), new Vector2(-14F, 24.375F));
                    builder.AddCubicBezier(new Vector2(-14F, 24.375F), new Vector2(20.375F, 0F), new Vector2(20.375F, 0F));
                    builder.AddCubicBezier(new Vector2(20.375F, 0F), new Vector2(19.6079998F, -0.52700001F), new Vector2(19.6079998F, -0.52700001F));
                    builder.AddCubicBezier(new Vector2(19.6079998F, -0.52700001F), new Vector2(-14F, -23.625F), new Vector2(-14F, -23.625F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Shape Layer 2
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-23.625F, -23.75F));
                    builder.AddLine(new Vector2(-23.5629997F, 24.25F));
                    builder.AddLine(new Vector2(24.25F, 24.375F));
                    builder.AddLine(new Vector2(24.0690002F, -23.8500004F));
                    builder.AddLine(new Vector2(-23.625F, -23.75F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Shape Layer 3
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-14F, -23.625F));
                    builder.AddLine(new Vector2(-14F, 24.375F));
                    builder.AddLine(new Vector2(20.375F, 0F));
                    builder.AddLine(new Vector2(19.6079998F, -0.52700001F));
                    builder.AddLine(new Vector2(-14F, -23.625F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground()
            {
                var result = _themeColor_Foreground = _c.CreateColorBrush();
                BindProperty(result, "Color", "ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            CompositionPath Path_0()
            {
                var result = _path_0 = new CompositionPath(Geometry_0());
                return result;
            }

            CompositionPath Path_1()
            {
                var result = _path_1 = new CompositionPath(Geometry_1());
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_0(), RootProgress());
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 2
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - Layer aggregator
            // Layer: Shape Layer 4
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_1(), _rootProgress);
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 3
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.Offset = new Vector2(35F, 35F);
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 4F;
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_m90_to_0(), _rootProgress);
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_0(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<35, 35>, Rotation:-90 degrees
                var result = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(0F, -1F, 1F, 0F, 35F, 35F));
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _themeColor_Foreground;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 4F;
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_1(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.Offset = new Vector2(35F, 35F);
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = _themeColor_Foreground;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 4F;
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_m90(), _rootProgress);
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_2(), _rootProgress);
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<35, 35>
                var result = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(1F, 0F, 0F, 1F, 35F, 35F));
                result.StrokeBrush = _themeColor_Foreground;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 4F;
                StartProgressBoundAnimation(result, "Scale", ShapeVisibilityAnimation_3(), _rootProgress);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - Layer aggregator
            // - Layer: Shape Layer 1
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), StepThenHoldEasingFunction());
                result.InsertKeyFrame(0.75F, _path_0, HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.862500012F, Path_1(), CubicBezierEasingFunction_0());
                return result;
            }

            // - - Layer aggregator
            // - Layer: Shape Layer 4
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                var result = CreatePathKeyFrameAnimation(0F, _path_1, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.25F, _path_1, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.375F, _path_0, _cubicBezierEasingFunction_0);
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 4
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_m90()
            {
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.25F, 0F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.4375F, -90F, _cubicBezierEasingFunction_0);
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_m90_to_0()
            {
                var result = CreateScalarKeyFrameAnimation(0F, -90F, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.75F, -90F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.925000012F, 0F, _cubicBezierEasingFunction_0);
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(70F, 70F);
                var shapes = result.Shapes;
                // Layer: Shape Layer 1
                shapes.Add(SpriteShape_0());
                // Layer: Shape Layer 2
                shapes.Add(SpriteShape_1());
                // Layer: Shape Layer 4
                shapes.Add(SpriteShape_2());
                // Layer: Shape Layer 3
                shapes.Add(SpriteShape_3());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
            {
                var result = CreateVector2KeyFrameAnimation(0.75F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 2
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
            {
                var result = CreateVector2KeyFrameAnimation(0.512499988F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.75F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 4
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_2()
            {
                var result = CreateVector2KeyFrameAnimation(0.25F, new Vector2(1F, 1F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.512499988F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 3
            Vector2KeyFrameAnimation ShapeVisibilityAnimation_3()
            {
                var result = CreateVector2KeyFrameAnimation(0.25F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                return result;
            }

            internal LottieViewer_04_Playback_AnimatedVisual(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(70F, 70F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }
    }
}
